#1. 리스트 자료형
# 파이썬의 리스트는 자바의 배열과 같은 기능을 포함하고 있으며 내부적으로 연결리스트 자료구조를
# 채택하고 있어서 append(), remove() 등의 메서드를 지원한다.

# 대괄호를 사용하여 리스트 생성
a = [1,2,3,4,5,6,7,8,9]
print(a)
print(a[4])

# 빈 리스트 선언 방법 1)
a = list()
print(a)

# 빈 리스트 선언 방법 2)
a = []
print(a)

# 코딩테스트 문제에서는 주로 크기가 N인 1차원 리스트를 초기화해야 하는데 다음 방식으로 초기화 하면 편리하다.
# 다음은 크기가 N이고 모든 값이 0인 1차원 리스트를 초기화하는 소스코드이다.

# 크기가 N이고, 모든 값이 0인 1차원 리스트 초기화
n =10
a = [0]*n
print(a)

# ------------------------------------------
#2.  리스트의 인덱싱과 슬라이싱
# 파이썬의 인덱스 값은 양의 정수와 음의 정수를 모두 사용할 수 있으며, 음의 정수를 넣으면 원소를 거꾸로 탐색한다.

a = [1,2,3,4,5,6,7,8,9]
# 뒤에서 첫 번째 원소 출력
print(a[-1])

# 뒤에서 세 번째 원소 출력
print(a[-3])

# 네 번째 원소 값 변경
a[3] = 7
print(a)

a = [1,2,3,4,5,6,7,8,9]
# 두 번째 원소부터 네 번째 원소까지 불러오기
print(a[1:4]) #1번째 인덱스~ 3번쨰 인덱스까지 불러온다.

# ------------------------------------------
# 3.리스트 컴프리헨션
# 리스트 컴프리헨션은 리스트를 초기화하는 방법 중 하나이다. 리스트 컴프리헨션을 이용하면
# 대괄호 안에 조건문과 반복문을 넣는 방식으로 리스트를 초기화할 수 있다.

array = [i for i in range(1,10)]
print(array)

# 0부터 19까지의 수 중에서 홀수만 포함하는 리스트
array =[i for i in range(20) if i%2 ==1]
print(array)

# array =[]
# for i in range(20) :
#     if i % 2==1 :
#         array.append(i)
#
# print(array)

# 1부터 9까지의 수의 제곱 값을 포함하는 리스트
array = [i*i for i in range(1,10)]
print(array)

# 이러한 리스트 컴프리헨션은 코딩 테스트에서 2차원 리스트를 초기화할 때 유용하다.

# N*M 크기의 2차원 리스트 초기화
n = 3
m = 4
array = [[0]*m for _ in range(n)]
print(array)

# 2차원 리스트를 초기화 할 때 반드시 리스트 컴프리헨션을 사용해야한다.
# 만약 아래와 같이 N8M크기의 리스트를 초기화한다면, 의도하지 않은 결과가 나온다.
# 이는 내부적으로 포함된 3개의 리스트가 모두 동일한 객체에 대한 3개의 레퍼런스로 인식되기 때문이다.
m =4
array = [[0]*m]*n
print(array)
array[1][1] = 5
print(array) # -> [[0, 5, 0, 0], [0, 5, 0, 0], [0, 5, 0, 0]]

# ------------------------------------------
# 4. 리스트 관련 메서드

a= [1,4,3]
print("기본리스트 : ",a)

# 리스트에 원소 삽입
a.append(2)
print("삽입 : ",a)

# 오름차순 정렬
a.sort()
print("오름차순 정렬",a)

# 내림차순 정렬
a.sort(reverse=True)
print("내림차순 정렬",a)

# 리스트 운소 뒤집기
a.reverse()
print("원소 뒤집기 : ",a)

# 특정 인덱스에 데이터 추가
a.insert(2,3)
print("인덱스 2에 3추가 : ",a)

# 특정 값인 데이터 개수 세기
print("값이 3인 데이터 개수 : ",a.count(3))

# 특정 값 데이터 삭제
a.remove(1)
print("값이 1인 데이터 삭제 : ",a)

# insert의 시간복잡도 O(N), remove의 시간복잡도 O(N), append의 시간복잡도 O(1)
# insert의 시간복잡도가 O(N)인 이유 : 중간에 원소를 삽입한 뒤에, 리스트의 원소 위치를
# 조정해줘야 하기 때문이다.
# ---> append의 속도가 더 빠르다. 따라서 insert를 남발하는 것을 지양하자.
# remove의 시간복잡도가 O(N)인 이유 : 중간에 있는 원소를 삭제한 뒤에, 리스트의 원소 위치를
# 조정해줘야 하기 때문이다.

# 효율적으로 특정한 값의 원소를 모두 제거하는 방법
a = [1,2,3,4,5,5,5]
remove_set = {3,5}

# remove_set에 포함되지 않은 값만을 저장
result = [i for i in a if i not in remove_set]
print(result)
